generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  // One for local dev, one for nodejs docker
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String? // TODO: remove?
  passwordHash String

  name              String  @unique
  country           String  @default("INTERNET")
  sensitiveMatching Boolean @default(false)

  userPaths     UserPath[]
  usersMatches  UsersMatch[]
  conversations Conversation[]
  pathFeedback  PathFeedback[]

  // Auth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  summary  String
  datetime DateTime

  embedding Unsupported("halfvec(3072)")?

  serendipitousPaths SerendipitousPath[]
  userPaths          UserPath[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Each serendipitous path is intended for a pair of 2 users only
model SerendipitousPath {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commonConversations Conversation[] // Conversations common/similar to all users in this path

  title         String
  commonSummary String // Summary of the common conversations
  category      String
  balanceScore  Float
  isSensitive   Boolean @default(false)

  // Through this relation, we can get the unique conversations for each user of a serendipitous path
  userPaths UserPath[]
  feedback  PathFeedback[]

  usersMatchId String
  usersMatch   UsersMatch @relation(fields: [usersMatchId], references: [id])
}

model UserPath {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uniqueConversations Conversation[] // Conversations unique to this user-path pair

  uniqueSummary      String // Summary of the unique conversations
  uniqueCallToAction String // What the user should ask the other user about, to complement their unique knowledge

  // Functions as join table between user and serendipitous path
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  path   SerendipitousPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId String

  @@unique([userId, pathId])
}

model UsersMatch {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  score  Float // Similarity score between users
  viewed Boolean @default(false)

  users              User[]
  serendipitousPaths SerendipitousPath[]
}

// -------------------- Auth.js models --------------------
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PathFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  score Int // -1 for thumbs down, +1 for thumbs up

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  path   SerendipitousPath @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId String

  @@unique([userId, pathId])
}
